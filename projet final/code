import time
import board
from adafruit_neotrellis.neotrellis import NeoTrellis
from adafruit_neotrellis.multitrellis import MultiTrellis

# Initialisation du I2C
i2c_bus = board.I2C()

# Définition des modules NeoTrellis
trelli = [
    [NeoTrellis(i2c_bus, False, addr=0x2E), NeoTrellis(i2c_bus, False, addr=0x2F)],
    [NeoTrellis(i2c_bus, False, addr=0x30), NeoTrellis(i2c_bus, False, addr=0x31)],
]
trellis = MultiTrellis(trelli) #Gestion pour le 8x8

#couleurs
OFF = (0, 0, 0)
BLUE = (0, 0, 255)
MAGENTA = (255, 0, 255)

class TrellisManager:
    def __init__(self, trellis):
        self.trellis = trellis
        self.led_status = [[OFF for i in range(8)] for i in range(8)]  # Stockage de l'état des LEDs dans une matrice

    def get_led_id(self, x, y):
        """Convertit (x, y) en un ID unique de LED (0-63)."""
        return y * 8 + x

    def get_led_coordinates(self, led_id):
        """Convertit un ID LED (0-63) en coordonnées (x, y)."""
        return led_id % 8, led_id // 8

    def set_led(self, x, y, color):
        """Change la couleur d'une LED et met à jour son état."""
        self.led_status[y][x] = color
        self.trellis.color(x, y, color)

    def get_led_status(self, x, y):
        """Récupère l'état actuel d'une LED."""
        return self.led_status[y][x]

    def handle_button(self, x, y, edge):
        """Gère les appuis sur les boutons."""
        if edge == NeoTrellis.EDGE_RISING:
            if self.get_led_status(x, y) == OFF:
                self.set_led(x, y, BLUE)  # Allume en bleu
            else:
                self.set_led(x, y, OFF)   # Éteint si déjà allumé

    def initialize(self):
        """Initialisation des LEDs avec un effet dégradé."""
        for y in range(8):
            for x in range(8):
                self.trellis.activate_key(x, y, NeoTrellis.EDGE_RISING)
                self.trellis.set_callback(x, y, self.handle_button)

                # Applique un effet dégradé
                gradient_color = (x * 32, y * 32, 150)
                self.set_led(x, y, gradient_color)
                time.sleep(0.05)

        # Éteint toutes les LEDs après l'effet de démarrage
        time.sleep(0.5)
        for y in range(8):
            for x in range(8):
                self.set_led(x, y, OFF)
                time.sleep(0.02)

    def benchmark(self,x,y):
        if self.get_led_status(x,y) != OFF:
            self.set_led(x,y,OFF)

        self.set_led(x,y,MAGENTA)


# Création et initialisation du gestionnaire
manager = TrellisManager(trellis)
manager.initialize()

#manager.benchmark(0,1)

# Boucle principale
while True:
    trellis.sync()  # Met à jour les événements des boutons
    time.sleep(0.02) 

